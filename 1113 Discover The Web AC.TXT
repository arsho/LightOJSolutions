#include<cstdio>
#include<cstring>
#include<cassert>
#include<vector>
#include<list>
#include<queue>
#include<map>
#include<set>
#include<deque>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iostream>
#include<iomanip>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<fstream>
#include<typeinfo>
#include<locale>
#include<iterator>
#include<valarray>
#include<complex>
#include<climits>

using namespace std;
#define uld unsingned long long
#define ld long long
#define inf INT_MAX
#define pi 2*acos(0.0)
#define vi vector<int>
#define  vl vector<long long>
#define pdd pair<int, int>
#define pll pair<long long, long long>
#define mp make_pair
#define mdd map<int, int>
#define mod 1000000000
#define pf first
#define ps second
#define vsort(v) sort(v.begin(), v.end())
#define cas(a) printf("Case %d:",a)
#define pb push_back

int main()
{
        int cas,a,b,c,d,e,f,g,h,i,j;
        scanf("%d",&cas);
        for(i=1;i<=cas;i++)
        {
                printf("Case %d:\n",i);
                stack<string>forward,back;
                string home="http://www.lightoj.com/",in;
                while(cin>>in && in!="QUIT")
                {
                        if(in=="BACK")
                        {
                                if(back.empty())
                                cout<<"Ignored\n";

                        else
                        {
                                forward.push(home);
                                home=back.top();
                                cout<<home<<endl;
                                back.pop();
                        }
                        }
                        else if(in=="FORWARD")
                        {
                                if(forward.empty())
                                cout<<"Ignored\n";
                                  else
                        {
                                back.push(home);
                                home=forward.top();
                                cout<<home<<endl;
                                forward.pop();
                        }
                        }
                        else
                        {
                                back.push(home);
                                cin>>home;
                                cout<<home<<endl;
                                forward=stack<string>();
                        }
                }
        }
      return 0;
}
